import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'java'
//apply plugin: 'idea'
apply plugin: 'application'
version = '0.0.1'

repositories {
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Groovy
    compile 'org.codehaus.groovy:groovy-all:2.3.6:indy'
    // Logging
    compile 'org.slf4j:slf4j-api:1.7.7'
    runtime 'org.slf4j:jcl-over-slf4j:1.7.7'
    runtime 'ch.qos.logback:logback-classic:1.1.2'
    // Apache
    compile 'org.apache.httpcomponents:httpclient:4.3.4'
    compile 'avalon:avalon-framework:4.1.4'
    // Spring
    compile 'org.springframework:spring-context:4.0.6.RELEASE'
    compile 'org.springframework:spring-tx:4.0.6.RELEASE'
    compile 'org.springframework:spring-jdbc:4.0.6.RELEASE'
    // Junit
    compile 'junit:junit:4.4'
    // Jbehave
    compile 'org.jbehave:jbehave-core:3.9.5'
    compile 'org.jbehave:jbehave-spring:3.9.5'
    // Gson
    compile 'com.google.code.gson:gson:2.3.1'
    // Jooq
    compile 'org.jooq:jooq:3.5.1'
    compile 'org.jooq:jooq-codegen:3.5.1'
    compile 'org.jooq:jooq-meta:3.5.1'
    // Postgresql
    compile "org.postgresql:postgresql:9.4-1200-jdbc41"
    // Junit
    compile 'junit:junit:4.4'
    // retrofit
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.retrofit:converter-jackson:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.0.0'
    compile 'com.squareup.okhttp:okhttp:2.0.0'
    // akka
    compile 'com.typesafe.akka:akka-actor_2.10:2.3.10'

    compile fileTree(dir: 'lib', include: ['*.jar'])
}

task copySoundFiles(type: Copy) {
    from 'src/main/resources/files'
    into '/var/opt/p90/tmp'
    include '**/*.wav'
    include '**/*.mp3'
}

task wrapper(type: Wrapper) {
    description 'Generates Gradle wrapper scripts'
    gradleVersion = '2.2'
}

task testStories(type: JavaExec, dependsOn: copySoundFiles) {
    description 'Runs all jbehave stories. ' +
            '\n -Pstory option for stories glob ' +
            '\n -Pmeta option for meta filterng'
    group 'test'
    main = "ru.teligent.mats.test.functional.Runner"
    classpath += files(sourceSets.main.runtimeClasspath)
    if (project.hasProperty('story')) {
        String story = project.getProperties().get('story', '*')
        if (story.matches('.+[.]story')) {
            systemProperty 'story.glob', story
        } else {
            systemProperty 'story.glob', story + '.story'
        }
    } else {
        systemProperty 'story.glob', '*'
    }

    if (project.hasProperty('meta')) {
        String meta = project.getProperties().get('meta', '')
        systemProperty 'meta.filter', meta
    } else {
        systemProperty 'meta.filter', ''
    }
}

task jooq(type: JavaExec, dependsOn: processResources) {
    description 'Generates jOOQ sources for database'
    main = "org.jooq.util.GenerationTool"
    //classpath += fileTree(dir: 'lib', include: ['*.jar'])
    classpath += files(sourceSets.main.runtimeClasspath)
    //classpath += files("$buildDir/resources/main")
    args = ["jooq-codegen.xml"]
}
